---
# Ansible playbook to install and configure Synchronet BBS
# This playbook will:
# - Create sbbs user and set up dependencies
# - Install Synchronet from source
# - Configure basic runtime environment
# Only rebuilds/reinstalls if sbbs binary is missing or non-functional

- hosts: all
  become: "yes"
  vars:
    ansible_become_method: sudo
    ansible_become_flags: "-H -S -n"
    ansible_python_interpreter: auto_silent
    ansible_become_pass: ""
    ansible_remote_tmp: /tmp/.ansible-${USER}
    sbbs_user: sbbs
    sbbs_home: /home/{{ sbbs_user }}
    sbbs_dir: "{{ sbbs_home }}/sbbs"
    repo_dir: "{{ sbbs_dir }}/repo"
    sbbs_symlink: "{{ sbbs_dir }}/exec/sbbs"
    bbs_hostname: bbs.c64.pub
    time_zone: America/Chicago

  tasks:
    - name: Create ansible remote temp directory with proper permissions
      file:
        path: /tmp/.ansible-${USER}
        state: directory
        mode: '0755'
      ignore_errors: yes

    - name: Add Group sbbs
      group:
        name: sbbs

    - name: Ensure sbbs user exists
      user:
        name: "{{ sbbs_user }}"
        shell: /bin/bash
        groups: wheel,sbbs,docker
        append: "yes"
        create_home: "yes"

    - name: Configure passwordless sudo for sbbs user
      lineinfile:
        path: /etc/sudoers.d/sbbs
        line: "{{ sbbs_user }} ALL=(ALL) NOPASSWD:ALL"
        create: yes
        mode: "0440"
        validate: "visudo -cf %s"

    - name: Install system dependencies
      dnf:
        name:
          - git
          - "@Development Tools"
          - pkg-config
          - ncurses-devel
          - libarchive-devel
          - openssl-devel
          - libcurl-devel
          - nspr-devel
          - nss-devel
          - libcap-devel
          - zip
          - unzip
          - telnet
          - rsyslog
          - docker
          - python3-pip
          - python3-cryptography
        state: present

    - name: Set timezone to Central US (Chicago)
      timezone:
        name: "{{ time_zone }}"

    - name: Check if SBBS symlink exists
      stat:
        path: "{{ sbbs_symlink }}"
        follow: no
      register: symlink_check

    - name: Get sbbs binary path from symlink
      command: readlink -f {{ sbbs_symlink }}
      register: sbbs_binary_path
      ignore_errors: yes
      when: symlink_check.stat.exists
      changed_when: false

    - name: Set binary path fact
      set_fact:
        sbbs_binary: "{{ sbbs_binary_path.stdout | default(repo_dir + '/src/sbbs3/gcc.linux.x64.exe.release/sbbs') }}"

    - name: Check if sbbs binary exists and works
      become_user: "{{ sbbs_user }}"
      command: "{{ sbbs_binary }} version"
      register: sbbs_check
      ignore_errors: yes
      changed_when: false
      when: symlink_check.stat.exists

    - name: Display SBBS version
      debug:
        msg: "{{ sbbs_check.stdout }}"
      when: sbbs_check is defined and sbbs_check.stdout is defined and sbbs_check.rc == 0

    - name: Configure environment
      lineinfile:
        path: "{{ sbbs_home }}/.bashrc"
        line: export SBBSCTRL={{ sbbs_dir }}/ctrl
        insertafter: EOF
        owner: "{{ sbbs_user }}"
        group: "{{ sbbs_user }}"
        mode: "0644"

    - block:
        - name: Create synchronet directory
          become_user: "{{ sbbs_user }}"
          file:
            path: "{{ sbbs_dir }}"
            state: directory
            owner: "{{ sbbs_user }}"
            group: "{{ sbbs_user }}"

        - name: Clean up previous installation
          become_user: "{{ sbbs_user }}"
          shell: |
            rm -rf ctrl docs exec node? text web webv4 xtrn mods repo
          args:
            chdir: "{{ sbbs_dir }}"
          ignore_errors: yes

        - name: Clone Synchronet source repo to repo subdirectory
          become_user: "{{ sbbs_user }}"
          git:
            repo: https://gitlab.synchro.net/main/sbbs.git
            dest: "{{ repo_dir }}"
            version: master
            update: "yes"
            force: yes

        - name: Build Synchronet (all components)
          become_user: "{{ sbbs_user }}"
          shell: |
            make -j{{ ansible_processor_cores }} RELEASE=1
          args:
            chdir: "{{ repo_dir }}/src/sbbs3"

        - name: Create runtime directories and install Synchronet
          become_user: "{{ sbbs_user }}"
          shell: |
            make -f install/install-sbbs.mk run
            make -f install/install-sbbs.mk RELEASE=1 SYMLINK=1 NOCAP=1
          args:
            chdir: "{{ repo_dir }}"
          environment:
            SBBSDIR: "{{ sbbs_dir }}"
          notify: restart sbbs

      when: not symlink_check.stat.exists or (sbbs_check is defined and sbbs_check.rc != 0)

    - name: Set capability on actual binary for binding to privileged ports
      command: setcap cap_net_bind_service=+ep "{{ sbbs_binary }}"
      become: yes
      ignore_errors: yes
      changed_when: false

    - name: Create symbolic link to scfg in sbbs home directory
      file:
        src: "{{ sbbs_dir }}/exec/scfg"
        dest: "{{ sbbs_home }}/scfg"
        state: link
        owner: "{{ sbbs_user }}"
        group: "{{ sbbs_user }}"
      become_user: "{{ sbbs_user }}"

    - name: Check if SBBS log file exists
      stat:
        path: /var/log/sbbs.log
      register: sbbs_log_exists

    - name: Create SBBS log file
      file:
        path: /var/log/sbbs.log
        state: touch
        owner: "{{ sbbs_user }}"
        group: "{{ sbbs_user }}"
        mode: "0644"
        modification_time: preserve
        access_time: preserve
      when: not sbbs_log_exists.stat.exists

    - name: Configure rsyslog for SBBS logging
      copy:
        content: |
          # SBBS logging configuration
          local3.*                 /var/log/sbbs.log
          # Exclude local3 from messages log
          *.*;local3.none          /var/log/messages
        dest: /etc/rsyslog.d/50-sbbs.conf
        owner: root
        group: root
        mode: "0644"
      notify: restart rsyslog

    - name: Start and enable rsyslog service
      systemd:
        name: rsyslog
        state: started
        enabled: yes

    - name: Configure SSH session timeout (24 hours)
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?ClientAliveInterval"
        line: "ClientAliveInterval 300"
        backup: yes
      notify: restart sshd

    - name: Configure SSH max alive count for 24h timeout
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?ClientAliveCountMax"
        line: "ClientAliveCountMax 288"
        backup: yes
      notify: restart sshd

    - name: Configure SBBS LogFacility in sbbs.ini
      lineinfile:
        path: "{{ sbbs_dir }}/ctrl/sbbs.ini"
        regexp: '^(\s*)LogFacility\s*=\s*.*$'
        line: '\1LogFacility = 3'
        backrefs: yes
      become_user: "{{ sbbs_user }}"
      ignore_errors: yes
      notify: restart sbbs

    - name: Setup logrotate for SBBS logs
      copy:
        content: |
          /var/log/sbbs*.log {
              weekly
              missingok
              rotate 52
              notifempty
              create 640 {{ sbbs_user }} {{ sbbs_user }}
              sharedscripts
              postrotate
                  /bin/systemctl reload rsyslog > /dev/null 2>&1 || true
              endscript
          }
        dest: /etc/logrotate.d/sbbs
        owner: root
        group: root
        mode: "0644"

    - name: Create systemd service file
      template:
        src: sbbs.service.j2
        dest: /etc/systemd/system/sbbs.service
        owner: root
        group: root
        mode: "0644"
      notify: reload systemd

    - name: Create empty ssl.cert file if not exists
      file:
        path: "{{ sbbs_dir }}/ctrl/ssl.cert"
        state: touch
        owner: "{{ sbbs_user }}"
        group: "{{ sbbs_user }}"
        mode: "0600"
      become_user: "{{ sbbs_user }}"

    - name: Configure letsyncrypt.ini - Comment out Directory line
      lineinfile:
        path: "{{ sbbs_dir }}/ctrl/letsyncrypt.ini"
        regexp: '^Directory\s*='
        line: '; Directory ='
        backup: yes
      become_user: "{{ sbbs_user }}"

    - name: Configure letsyncrypt.ini - Agree to Terms of Service
      lineinfile:
        path: "{{ sbbs_dir }}/ctrl/letsyncrypt.ini"
        regexp: '^TOSAgreed\s*='
        line: 'TOSAgreed = true'
        backup: yes
      become_user: "{{ sbbs_user }}"

    - name: Configure letsyncrypt.ini - Add domain configuration
      lineinfile:
        path: "{{ sbbs_dir }}/ctrl/letsyncrypt.ini"
        insertafter: '^\[Domains\]'
        line: '{{ bbs_hostname }} = {{ sbbs_dir }}/webv4/root'
        backup: yes
      become_user: "{{ sbbs_user }}"

    - name: Check if SYNCRYPT event already exists in xtrn.ini
      lineinfile:
        path: "{{ sbbs_dir }}/ctrl/xtrn.ini"
        regexp: '^\[event:SYNCRYPT\]'
        state: absent
      check_mode: yes
      register: syncrypt_exists
      become_user: "{{ sbbs_user }}"

    - name: Add SYNCRYPT event to xtrn.ini for automatic SSL certificate management
      blockinfile:
        path: "{{ sbbs_dir }}/ctrl/xtrn.ini"
        marker: ""
        insertafter: EOF
        block: |
          [event:SYNCRYPT]
                  cmd=?letsyncrypt.js
                  days=255
                  time=0
                  node_num=1
                  settings=4
                  startup_dir=
                  freq=1440
                  mdays=0
                  months=0
                  errlevel=3
        backup: yes
        create: no
      become_user: "{{ sbbs_user }}"
      when: syncrypt_exists.found == 0

    - name: Enable and start Synchronet SBBS service
      systemd:
        name: sbbs
        enabled: yes
        state: started

  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes

    - name: restart rsyslog
      systemd:
        name: rsyslog
        state: restarted

    - name: restart sshd
      systemd:
        name: sshd
        state: restarted

    - name: restart sbbs
      systemd:
        name: sbbs
        state: restarted
